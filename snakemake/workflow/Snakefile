"""
Snakemake workflow for RNA-seq analysis
Manual: https://github.com/radio1988/OneStopRNAseq/blob/master/snakemake/README.md
"""

import pandas as pd
import sys, re, os, math
from snakemake.utils import min_version


min_version("7.2")  # check snakemake version
localrules: targets
configfile: "config.yaml"
include: 'rules/common.smk'  # common functions

# CONFIGURATION
config, SAMPLES, DE_CONTRAST_NAMES, AS_CONTRAST_NAMES = check_and_update_config(config)

# for rMATS
if config['RMATS_ANALYSIS'] and config['START'] in ["FASTQ", "BAM"]:
    G = get_contrast_groups(config['CONTRAST_AS'])
    #print("\nGRPUPS:\n", G[0], "\nVS\n", G[1])

    g2s = get_dict_from_meta(config['META'])
    #print("\nGroup To Sample Mapping:\n", g2s)

    B1S, B1 = G2B_workflow(G[0],g2s)
    B2S, B2 = G2B_workflow(G[1],g2s)

    # print("\nrMATS -b1:\n", B1)
    # print("B1S:", B1S)
    # print("rMATS -b2:\n", B2)
    # print("B2S:", B2S)

    # Get contrast for rMATS
    df2 = read_table(config['CONTRAST_AS'])
    ASCN = df2.shape[1]  # alternative splicing contrast count
else:
    B1 = "placeholder.bam"
    B1S = ["placeholder"]
    B2 = B1
    B2S = B1S
    ASCN = 0



def target_input(config, ASCN):
    """
    - define target results to generate
    - check config logic error (in-compatibility)
    """
    l = ["workflow_full_DAG.pdf"]

    if config['START'] == 'FASTQ':
        l.append("fastqc/fastqc.zip")
        l.append("fastqc/CheckFile/all.txt")  # check fastq.gz size after trimming, if empty, abort

        if config['CleanUpRNAseqQC']:
            l.append("CleanUpRNAseqQC/Fig7.PCA.showing.sample.variability.pdf")  # QC

        if config['CleanUpRNAseqCorrection']:
            l.append("CleanUpRNAseqQC/global.corrected.count.csv")  # correction
            if config['DESEQ2_ANALYSIS'] or config['GSEA_ANALYSIS']:
                l.append("CleanUpRNAseqDE/CleanUpRNAseqDE.html")  # DESeq2_IR (df > 1) or DESeq2_DNA_Corrected (df = 1)

        if config["ASSEMBLY_ANALYSIS"]:
            if config['START'] not in ['FASTQ']:
                raise Exception('config Error: START and ASSEMBLY_ANALYSIS incompatible')
            l.append('stringtie/stringtie.merged.gtf')

    if config['START'] in ['FASTQ', 'BAM']:
        l.append('bam_qc/bam_qc.zip')

        l.extend(['bigWig/{}.{}.cpm.bw'.format(sample,config['MODE']) \
                  for sample in SAMPLES])

        l.extend(["feature_count/counts.s{}.{}.txt.summary.multiqc_report.html".format(strand,config['MODE']) \
                  for strand in config['STRAND']])

        if config['INTRON']:
            l.extend([
                "feature_count_gene_level/counts.s{}.{}.txt.summary.multiqc_report.html".format(strand,config['MODE']) \
                for strand in config['STRAND']])

        if config['RMATS_ANALYSIS']:
            l.extend(['rMATS.{ascn}/output/Results_JunctionCountsBased/RI.MATS.JC.sig.tsv'.format(ascn=ascn) \
                      for ascn in range(1,1 + ASCN)])

        if config['DEXSEQ_ANALYSIS']:
            l.append(["DEXSeq/contrast{ascn}/contrast{ascn}.RData". \
                          format(ascn=ascn) for ascn in range(1,ASCN + 1)])

        if config['ASE_ANALYSIS']:
            l.extend(["GATK_ASEReadCounter/{sample}.table".format(sample=sample) for sample in SAMPLES])

    if config['START'] in ['FASTQ', 'BAM', 'COUNT']:
        if config['DESEQ2_ANALYSIS']:
            l.append("DESeq2/DESeq2.html")

    if config['GSEA_ANALYSIS']:
        l.extend(ALL_GSEA_OUTPUT(config))
        l.extend(GSEACOMPRESS_OUTPUT(config))
        # l.extend(GSEA_SINGLEBUBBLE_OUTPUT(config))
        l.extend(["gsea/gsea_bubble/{db}.{topn}.pdf".format(db=db, topn=topn) \
                  for db in config['GSEA_DB_NAMES'] for topn in [20, 100,1000]])
        # l.append('gsea/gsea_bubble.tar.gz')

    return l


rule targets:
    input:
        target_input(config,ASCN)
    threads:
        1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1000


# subworkflows
# popular
include: 'rules/main.smk'
include: 'rules/trim_qc.smk'
include: 'rules/align_qc_bw.smk'
include: 'rules/quant.smk'
include: 'rules/cleanuprnaseq.smk'
include: 'rules/gsea.smk'
# tricky
include: 'rules/rmats.smk'  # rmats has poor statistical power for obvious AS events
include: 'rules/dexseq.smk'  # low power, poor annotation
# uncommon
include: 'rules/assembly.smk'
include: 'rules/ase.smk'  # ASE allele specific expression (quantification only)
